{"version":3,"sources":["TR808_bass-drum.mp3","TR808_snare.mp3","TR808_low-tom-tom.mp3","TR808_low-conga.mp3","TR808_mid-conga.mp3","TR808_high-conga.mp3","TR808_cow-bell.mp3","TR808_clap.mp3","TR808_closedHH.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","clicked","display","handleClick","bind","assertThisInitialized","playSound","handleKeyPress","document","addEventListener","event","keyCode","letter","soundName","setState","audio","getElementById","currentTime","play","_this2","react_default","a","createElement","className","id","onClick","class","src","bassDrum","lowTomTom","snare","lowConga","midConga","highConga","cowBell","clap","closedHH","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0YCmHvBC,qBAnGf,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,QAAW,IACXC,QAAW,IAEbT,EAAKU,YAAcV,EAAKU,YAAYC,KAAjBV,OAAAW,EAAA,EAAAX,CAAAD,IACnBA,EAAKa,UAAYb,EAAKa,UAAUF,KAAfV,OAAAW,EAAA,EAAAX,CAAAD,IACjBA,EAAKc,eAAiBd,EAAKc,eAAeH,KAApBV,OAAAW,EAAA,EAAAX,CAAAD,IATLA,mFAcjBe,SAASC,iBAAiB,UAAWb,KAAKW,uDAI7BG,GACb,OAAQA,EAAMC,SACZ,KAAK,GACHf,KAAKO,YAAY,IAAK,aACtB,MACF,KAAK,GACHP,KAAKO,YAAY,IAAK,eACtB,MACF,KAAK,GACHP,KAAKO,YAAY,IAAK,SACtB,MACF,KAAK,GACHP,KAAKO,YAAY,IAAK,aACtB,MACF,KAAK,GACHP,KAAKO,YAAY,IAAK,aACtB,MACF,KAAK,GACHP,KAAKO,YAAY,IAAK,cACtB,MACF,KAAK,GACHP,KAAKO,YAAY,IAAK,YACtB,MACF,KAAK,GACHP,KAAKO,YAAY,IAAK,QACtB,MACF,KAAK,GACHP,KAAKO,YAAY,IAAK,yDAOfS,EAAQC,GACnBjB,KAAKkB,SAAS,CACZb,QAAWW,EACXV,QAAWW,IAEbjB,KAAKU,UAAUM,qCAKNA,GAET,IAAIG,EAAQP,SAASQ,eAAeJ,GACpCG,EAAME,YAAc,EACpBF,EAAMG,wCAGC,IAAAC,EAAAvB,KACP,OACEwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAAA,2BAGAF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,gBACRJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,WAAW5B,KAAKI,MAAME,SAG9BkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,WAAWC,QAAS,kBAAMN,EAAKhB,YAAY,IAAK,eAA7E,IAA4FiB,EAAAC,EAAAC,cAAA,SAAOI,MAAM,OAAOC,IAAKC,IAAUJ,GAAG,OAClIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,YAAYC,QAAS,kBAAMN,EAAKhB,YAAY,IAAK,iBAA9E,IAA+FiB,EAAAC,EAAAC,cAAA,SAAOI,MAAM,OAAOC,IAAKE,IAAWL,GAAG,OACtIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,QAAQC,QAAS,kBAAMN,EAAKhB,YAAY,IAAK,WAA1E,IAAqFiB,EAAAC,EAAAC,cAAA,SAAOI,MAAM,OAAOC,IAAKG,IAAON,GAAG,OAExHJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,WAAWC,QAAS,kBAAMN,EAAKhB,YAAY,IAAK,eAA7E,IAA4FiB,EAAAC,EAAAC,cAAA,SAAOI,MAAM,OAAOC,IAAKI,IAAUP,GAAG,OAClIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,WAAWC,QAAS,kBAAMN,EAAKhB,YAAY,IAAK,eAA7E,IAA4FiB,EAAAC,EAAAC,cAAA,SAAOI,MAAM,OAAOC,IAAKK,IAAUR,GAAG,OAClIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,YAAYC,QAAS,kBAAMN,EAAKhB,YAAY,IAAK,gBAA9E,IAA8FiB,EAAAC,EAAAC,cAAA,SAAOI,MAAM,OAAOC,IAAKM,IAAWT,GAAG,OAErIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,UAAUC,QAAS,kBAAMN,EAAKhB,YAAY,IAAK,cAA5E,IAA0FiB,EAAAC,EAAAC,cAAA,SAAOI,MAAM,OAAOC,IAAKO,IAASV,GAAG,OAC/HJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,OAAOC,QAAS,kBAAMN,EAAKhB,YAAY,IAAK,UAAzE,IAAmFiB,EAAAC,EAAAC,cAAA,SAAOI,MAAM,OAAOC,IAAKQ,IAAMX,GAAG,OACrHJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAG,WAAWC,QAAS,kBAAMN,EAAKhB,YAAY,IAAK,sBAA7E,IAAmGiB,EAAAC,EAAAC,cAAA,SAAOI,MAAM,OAAOC,IAAKS,IAAUZ,GAAG,gBA3F7Ha,cCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASrC,SAASQ,eAAe,SD2H3C,kBAAmB8B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.25b83916.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/TR808_bass-drum.e9f52e60.mp3\";","module.exports = __webpack_public_path__ + \"static/media/TR808_snare.ae7a80c4.mp3\";","module.exports = __webpack_public_path__ + \"static/media/TR808_low-tom-tom.b93c84b9.mp3\";","module.exports = __webpack_public_path__ + \"static/media/TR808_low-conga.3dcd4ffa.mp3\";","module.exports = __webpack_public_path__ + \"static/media/TR808_mid-conga.87f2798d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/TR808_high-conga.751195d3.mp3\";","module.exports = __webpack_public_path__ + \"static/media/TR808_cow-bell.62fe1b9d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/TR808_clap.cbad116f.mp3\";","module.exports = __webpack_public_path__ + \"static/media/TR808_closedHH.3b3923f0.mp3\";","import React, { Component } from 'react';\nimport bassDrum from './TR808_bass-drum.mp3';\nimport snare from './TR808_snare.mp3';\nimport lowTomTom from './TR808_low-tom-tom.mp3';\nimport lowConga from './TR808_low-conga.mp3';\nimport midConga from './TR808_mid-conga.mp3';\nimport highConga from './TR808_high-conga.mp3';\nimport cowBell from './TR808_cow-bell.mp3';\nimport clap from './TR808_clap.mp3';\nimport closedHH from './TR808_closedHH.mp3';\n\nimport './App.css';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    //clicked is not currently used, but it has been added in order to facilitate a styling updated based on which key is pressed.\n    this.state = {\n      \"clicked\": \"Q\",\n      \"display\": \"\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.playSound = this.playSound.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    \n  }\n  \n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n  \n  //update this to use handle click\n  handleKeyPress(event) {\n    switch (event.keyCode) {\n      case 81:\n        this.handleClick(\"Q\", \"Bass Drum\");\n        break;\n      case 87:\n        this.handleClick(\"W\", \"Low Tom Tom\");\n        break;\n      case 69:\n        this.handleClick(\"E\", \"Snare\");\n        break;\n      case 65:\n        this.handleClick(\"A\", \"Low Conga\");\n        break;  \n      case 83:\n        this.handleClick(\"S\", \"Mid Conga\");\n        break;\n      case 68:\n        this.handleClick(\"D\", \"High Conga\");\n        break;\n      case 90:\n        this.handleClick(\"Z\", \"Cow Bell\");\n        break;\n      case 88:\n        this.handleClick(\"X\", \"Clap\");\n        break;\n      case 67:\n        this.handleClick(\"C\", \" Closed High Hat\");\n        break;        \n    }\n  }\n  \n  //use handle click to update state and play sound.  \n  \n  handleClick (letter, soundName) {\n    this.setState({\n      \"clicked\": letter,\n      \"display\": soundName\n    });\n    this.playSound(letter);\n    //console.log(\"State: \" + this.state.clicked);\n  }  \n\n  //playSound uses html media api to play the sound and sets currentTime to zero 0 in order to play sounds closer together.\n  playSound (letter) {\n    //console.log(\"play: \" + letter);\n    let audio = document.getElementById(letter);\n    audio.currentTime = 0;\n    audio.play();\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n      <h1>Drum Machine</h1>\n      </header>\n\n      <div id=\"drum-machine\">\n      <div id=\"display\">{this.state.display}</div>\n      \n      \n      <div className=\"drum-pad\" id=\"bassDrum\" onClick={() => this.handleClick(\"Q\", \"Bass Drum\")}>Q<audio class=\"clip\" src={bassDrum} id=\"Q\"></audio></div>\n      <div className=\"drum-pad\" id=\"lowTomTom\" onClick={() => this.handleClick(\"W\", \"Low Tom Tom\")}>W<audio class=\"clip\" src={lowTomTom} id=\"W\"></audio></div>\n      <div className=\"drum-pad\" id=\"snare\" onClick={() => this.handleClick(\"E\", \"Snare\")}>E<audio class=\"clip\" src={snare} id=\"E\"></audio></div>\n      \n      <div className=\"drum-pad\" id=\"lowConga\" onClick={() => this.handleClick(\"A\", \"Low Conga\")}>A<audio class=\"clip\" src={lowConga} id=\"A\"></audio></div>\n      <div className=\"drum-pad\" id=\"midConga\" onClick={() => this.handleClick(\"S\", \"Mid Conga\")}>S<audio class=\"clip\" src={midConga} id=\"S\"></audio></div>\n      <div className=\"drum-pad\" id=\"highConga\" onClick={() => this.handleClick(\"D\", \"High Conga\")}>D<audio class=\"clip\" src={highConga} id=\"D\"></audio></div>\n      \n      <div className=\"drum-pad\" id=\"cowbell\" onClick={() => this.handleClick(\"Z\", \"Cow Bell\")}>Z<audio class=\"clip\" src={cowBell} id=\"Z\"></audio></div>\n      <div className=\"drum-pad\" id=\"clap\" onClick={() => this.handleClick(\"X\", \"Clap\")}>X<audio class=\"clip\" src={clap} id=\"X\"></audio></div>\n      <div className=\"drum-pad\" id=\"closedHH\" onClick={() => this.handleClick(\"C\", \" Closed High Hat\")}>C<audio class=\"clip\" src={closedHH} id=\"C\"></audio></div>\n      </div>\n      \n      \n      </div>\n      );\n    }\n  }\n  \n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}